.mapToInt(value -> value) is commented because it does not convert characters to digits.
        It simply keeps the Unicode / ASCII value of each character.
        e.g. "123".chars().mapToInt(value -> value).forEach(System.out::println);  //will give 49, 50, 51
ðŸŸ¢ Beginner Level (Syntax, Loops, Arrays, Strings)

Focus: logic building, control flow, basic Java syntax.

Reverse a String â€” Write a program to reverse a string without using built-in methods.

Count Vowels and Consonants â€” Given a string, count vowels and consonants separately.

Palindrome Check â€” Check if a string or number is a palindrome.

Sum of Digits â€” Input a number, find the sum of its digits.

Find Maximum in Array â€” Find the largest number in an integer array.

Second-Largest Element â€” Without sorting, find the second-largest number in an array.

Swap Two Numbers â€” Swap two variables without using a third variable.

Factorial Using Loops â€” Calculate factorial of a number using iteration.

Check Prime â€” Check if a number is prime.

Fibonacci Series â€” Print first N Fibonacci numbers (iteratively and recursively).

ðŸŸ¡ Intermediate Level (OOP, Collections, File Handling)

Focus: object-oriented design, collections API, exceptions, streams.

Employee Class â€” Create an Employee class with fields like id, name, salary and methods to display info.

Bank Account Simulation â€” Create a BankAccount class with deposit and withdraw methods, ensuring no negative balance.

Count Word Frequency â€” Given a sentence, count occurrences of each word using HashMap.

    Sort by Value â€” Sort a HashMap by its values (ascending order).

Find Duplicates in List â€” Given a list of integers, find all duplicates using streams or collections.

Remove Nulls from List â€” Given a list containing nulls, remove them safely.

File Word Count â€” Read a text file and count how many times each word appears.

Custom Exception â€” Create a custom exception for invalid age input (< 18).

Reverse LinkedList â€” Reverse a LinkedList without using built-in reverse methods.

Student Sorting â€” Create a Student class and sort students by name, then by grade using Comparator.

ðŸ”µ Advanced Level (Streams, Concurrency, Design Patterns, Algorithms)

Focus: modern Java, problem-solving, multi-threading.

Find nth Highest Salary (Streams) â€” Given a list of employees, find the nth highest salary using streams.

Group Employees by Department â€” Use streams and collectors to group employees.

Deadlock Example â€” Write a small program that demonstrates a thread deadlock scenario.

Producer-Consumer Problem â€” Implement using wait() and notify().

Singleton Pattern â€” Implement a thread-safe singleton class.

LRU Cache Implementation â€” Implement LRU cache using LinkedHashMap.

Multithreaded Sum â€” Split an array into parts and sum elements in parallel using threads.

Word Ladder Problem â€” Given a start and end word, find the shortest transformation using BFS.

Merge Intervals â€” Given overlapping intervals, merge them efficiently.

Stream Pipeline Challenge â€” Given a list of orders, compute total revenue per customer using streams and collectors.

ðŸ’¡ Bonus Challenges

If you finish the above:

Build a Mini Library Management System (OOP + Collections + File IO).

Build a CLI-based Banking System (handle accounts, transactions, logs).

Simulate a Task Scheduler using threads and priority queue.